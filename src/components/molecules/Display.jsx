import HoverButton from "../atoms/HoverButton";
import { RiScreenshot2Line } from "react-icons/ri";
import { loader } from "../../assets";
import { createRef } from "react";
import { useScreenshot, createFileName } from "use-react-screenshot";
import PropTypes from "prop-types";

const Display = ({ isLoading, error, selectedData }) => {
  const ref = createRef(null);
  const [image, takeScreenShot] = useScreenshot({
    type: "image/jpeg",
    quality: 1.0,
  });

  const download = (image, { name = "img", extension = "jpg" } = {}) => {
    const a = document.createElement("a");
    a.href = image;
    a.download = createFileName(extension, name);
    a.click();
  };

  const downloadScreenshot = () => takeScreenShot(ref.current).then(download);

  return (
    <div className="my-10 max-w-full flex justify-center items-center">
      {isLoading ? (
        <img
          src={loader}
          alt="loader"
          className="w-20 h-20 object-contain flex justify-center"
        />
      ) : error ? (
        <p className="font-inter font-bold text-black text-center">
          Something goes wrong... <br />
          <span className="font-satoshi font-normal text-gray-700">
            {error?.data?.error}
          </span>
        </p>
      ) : (
        selectedData && (
          <div ref={ref}>
            {
              <div className="mb-8 rounded-xl border relative border-gray-200 bg-white/20 shadow-[inset_10px_-50px_94px_0_rgb(199,199,199,0.2)] backdrop-blur p-4  ">
                <button
                  onClick={downloadScreenshot}
                  className="absolute top-8 right-8 xs:right-2 xs:top-8  hover:text-white ">
                  <RiScreenshot2Line size={36} />
                </button>
                <h3 className="text-3xl font-bold mt-4 mb-8 sm:text-3xl ">
                  Detection Result:
                </h3>
                <div className="flex gap-2 items-center mb-4 justify-between ">
                  <h4 className="text-2xl font-semibold sm:text-2xl">
                    Sentences generated by AI:
                  </h4>
                  <HoverButton
                    size={20}
                    text="This parameter shows how many sentences in the text were generated by AI."
                  />
                </div>
                <ul className="mb-4">
                  {selectedData.aiSentences.map((sentence, index) => (
                    <li className="list-disc ml-4" key={index}>
                      {sentence}
                    </li>
                  ))}
                </ul>
                <div className="flex gap-2 items-center mb-4 justify-between">
                  <h4 className="text-2xl font-semibold  sm:text-2xl">
                    AI Words:
                  </h4>
                  <HoverButton
                    size={20}
                    text="This parameter shows how many words of the text was generated by AI."
                  />
                </div>
                <li className="mb-4 text-xl font-medium sm:text-xl">
                  {selectedData.aiWords}
                </li>
                <div className="flex gap-2 items-center mb-4 justify-between ">
                  <h4 className="text-2xl font-semibold  sm:text-2xl">
                    Percentage of text generated by AI:
                  </h4>
                  <HoverButton
                    size={20}
                    text="This parameter shows what percentage of the text was generated by AI."
                  />
                </div>
                <li className="mb-4 text-xl font-medium sm:text-xl">
                  {selectedData.fakePercentage}%
                </li>
                <div className="flex gap-2 items-center mb-4 justify-between ">
                  <h4 className="text-2xl font-semibold sm:text-2xl">
                    Percentage of text generated by Human:
                  </h4>
                  <HoverButton
                    size={20}
                    text="This parameter shows what percentage of the text was written by a human"
                  />
                </div>
                <li className="mb-4 text-xl font-medium sm:text-xl">
                  {selectedData.isHuman}%
                </li>
                <div className="flex justify-between items-center mb-4 ">
                  <h4 className="text-2xl font-semibold sm:text-2xl">
                    Total Word in the Text:
                  </h4>
                  <HoverButton
                    size={20}
                    text="This parameter shows how many words the text has."
                  />
                </div>
                <li className="mb-4 text-xl font-medium sm:text-xl">
                  {selectedData.textWords}
                </li>
              </div>
            }
          </div>
        )
      )}
    </div>
  );
};

Display.propTypes = {
  error: PropTypes.object,
  selectedData: PropTypes.shape({
    aiSentences: PropTypes.arrayOf(PropTypes.string).isRequired,
    aiWords: PropTypes.number.isRequired,
    fakePercentage: PropTypes.number.isRequired,
    isHuman: PropTypes.number.isRequired,
    textWords: PropTypes.number.isRequired,
  }),
  isLoading: PropTypes.bool,
};
export default Display;
